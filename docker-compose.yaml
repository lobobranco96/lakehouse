services:
  spark:
    build: ./spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_ICEBERG_CATALOG=hadoop
      - SPARK_ICEBERG_CATALOG_URI=iceberg://spark:7077
      - SPARK_ICEBERG_STORAGE_URI=s3a://bronze/
    ports:
      - '8080:8080'
      - '7077:7077'
    volumes:
      - ./data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 20s
      retries: 3

  spark-worker:
    build: ./spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_ICEBERG_CATALOG=hadoop
      - SPARK_ICEBERG_CATALOG_URI=iceberg://spark:7077
      - SPARK_ICEBERG_STORAGE_URI=s3a://bronze/
    volumes:
      - ./data:/data
    depends_on:
      spark:
        condition: service_healthy

  jupyter:
    build: ./jupyter/
    environment:
      - JUPYTER_TOKEN=TestTest123
      - S3_ENDPOINT=http://minio:9000
      - S3_BUCKET=landing
      - S3_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - S3_SECRET_KEY=${MINIO_SECRET_KEY}
      - SPARK_ICEBERG_CATALOG=hadoop
      - SPARK_ICEBERG_CATALOG_URI=iceberg://spark:7077
      - SPARK_ICEBERG_STORAGE_URI=s3a://landing/
    #command: start-notebook.sh --NotebookApp.token=${JUPYTER_TOKEN}
    ports:
      - 8888:8888
    volumes:
      - ./jupyter/notebooks/:/notebooks/
    depends_on:
      minio:
        condition: service_healthy
      
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_REGION: ${MINIO_REGION}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
      - ./minio/include:/include
      - ./minio/data:/data
      - ./minio/minio-client:/root/.mc
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - lakehouse-network

  minio-bucket:
    image: minio/mc:latest
    container_name: minio-bucket
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./minio/include:/include  # Inclui arquivos para upload
    entrypoint: >
      /bin/sh -c "
      until mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} >/dev/null 2>&1; do
        echo 'Aguardando MinIO...';
        sleep 5;
      done;
      echo 'MinIO está pronto. Iniciando configuração dos buckets.';
      mc mb myminio/landing;
      mc mb myminio/bronze;
      mc mb myminio/silver;
      mc mb myminio/gold;
      echo 'Buckets criados com sucesso.';
      mc anonymous set public myminio/landing;
      mc anonymous set public myminio/bronze;
      mc anonymous set public myminio/silver;
      mc anonymous set public myminio/gold;
      echo 'Políticas de acesso definidas para público.';
      echo 'Copiando arquivos para o bucket landing.';
      mc cp /include/marca_carro.csv myminio/landing/marca_carro.csv;
      echo 'Arquivos copiados com sucesso.';
      "
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - lakehouse-network

  nessie:
    image: projectnessie/nessie:latest
    container_name: nessie
    environment:
      - NESSIE_DB_TYPE=rocksdb        # Pode ser ajustado conforme o tipo de banco de dados que você deseja usar (exemplo: rocksdb, postgres, etc)
      - NESSIE_SERVER_PORT=19120      # Porta padrão do Nessie
    ports:
      - "19120:19120"                 # Porta do servidor Nessie
    volumes:
      - nessie_data:/data             # Volumes persistentes para o Nessie
    networks:
      - lakehouse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19120/"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  minio_data:
  nessie_data:

networks:
  lakehouse-network:
    driver: bridge
