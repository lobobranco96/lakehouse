version: '3.8'

services:
  spark:
    build: ./spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_ICEBERG_CATALOG=hadoop
      - SPARK_ICEBERG_CATALOG_URI=iceberg://spark:7077
      - SPARK_ICEBERG_STORAGE_URI=s3a://bronze/
    ports:
      - '8080:8080'
      - '7077:7077'
    volumes:
      - ./data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 20s
      retries: 3

  spark-worker:
    build: ./spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_ICEBERG_CATALOG=hadoop
      - SPARK_ICEBERG_CATALOG_URI=iceberg://spark:7077
      - SPARK_ICEBERG_STORAGE_URI=s3a://bronze/
    volumes:
      - ./data:/data
    depends_on:
      spark:
        condition: service_healthy

  jupyter:
    build: ./jupyter/
    environment:
      - S3_ENDPOINT=http://minio:9001
      - S3_BUCKET=bronze
      - S3_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - S3_SECRET_KEY=${MINIO_SECRET_KEY}
      - SPARK_ICEBERG_CATALOG=hadoop
      - SPARK_ICEBERG_CATALOG_URI=iceberg://spark:7077
      - SPARK_ICEBERG_STORAGE_URI=s3a://bronze/
    ports:
      - 8888:8888
    volumes:
      - ./jupyter/notebooks/:/notebooks/
      
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}               # usuário root para o MinIO
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}       # senha root para o MinIO
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
      - ./minio/include:/include                        # Volume para dados a serem copiados
      - ./minio/bucket-init.sh:/bucket-init.sh          # Script para criar buckets e fazer upload
      - ./minio/data:/data                              # Pasta persistente para dados do MinIO
      - ./minio/minio-client:/root/.mc                  # Configuração persistente do MinIO Client
    entrypoint: /bin/sh -c "/bucket-init.sh && /usr/bin/docker-entrypoint.sh minio server /data --console-address ':9001'"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - lakehouse-network

  nessie:
    image: projectnessie/nessie:latest
    container_name: nessie
    environment:
      - NESSIE_DB_TYPE=rocksdb        # Pode ser ajustado conforme o tipo de banco de dados que você deseja usar (exemplo: rocksdb, postgres, etc)
      - NESSIE_SERVER_PORT=19120      # Porta padrão do Nessie
    ports:
      - "19120:19120"                 # Porta do servidor Nessie
    volumes:
      - nessie_data:/data             # Volumes persistentes para o Nessie
    networks:
      - lakehouse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19120/"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  minio_data:
  nessie_data:

networks:
  lakehouse-network:
    driver: bridge
