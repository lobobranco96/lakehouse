x-common-log-config: &default_config
  networks:
    - lakehouse_network

x-common-healthcheck-default: &default_healthcheck
  timeout: 45s
  interval: 10s
  retries: 10
  start_period: 10s

services:

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=storage
      - MINIO_REGION_NAME=us-east-1
      - MINIO_REGION=us-east-1
    command: server /data --console-address ":9001"
    volumes:
      - lakehouse_minio_vol:/data
      - ./minio/include:/include
      - ./minio/data:/data
      - ./minio/minio-client:/root/.mc
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - lakehouse_network

  minio-bucket:
    image: minio/mc:latest
    container_name: minio-bucket
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./minio/include:/include  # Inclui arquivos para upload
    entrypoint: >
      /bin/sh -c "
      until mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} >/dev/null 2>&1; do
        echo 'Aguardando MinIO...';
        sleep 5;
      done;
      echo 'MinIO está pronto. Iniciando configuração dos buckets.';
      mc mb myminio/landing;
      mc mb myminio/bronze;
      mc mb myminio/silver;
      mc mb myminio/gold;
      echo 'Buckets criados com sucesso.';
      mc anonymous set public myminio/landing;
      mc anonymous set public myminio/bronze;
      mc anonymous set public myminio/silver;
      mc anonymous set public myminio/gold;
      echo 'Políticas de acesso definidas para público.';
      echo 'Copiando arquivos para o bucket landing.';
      mc cp /include/marca_carro.csv myminio/landing/marca_carro.csv;
      echo 'Arquivos copiados com sucesso.';
      "
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - AWS_DEFAULT_REGION=us-east-1
    networks:
      - lakehouse_network

  postgres_nessie:
    image: postgres:16
    container_name: postgres_nessie
    environment:
      POSTGRES_USER: nessie
      POSTGRES_PASSWORD: nessie
      POSTGRES_DB: nessie
    volumes:
      - lakehouse_pg_nessie_vol:/var/lib/postgresql/data
    <<: *default_config

  nessie:
    image: bitnami/nessie:0.99.0
    container_name: nessie
    restart: always
    <<: *default_config
    environment:
      - NESSIE_VERSION_STORE_TYPE=JDBC
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://postgres_nessie:5432/nessie
      - QUARKUS_DATASOURCE_USERNAME=nessie
      - QUARKUS_DATASOURCE_PASSWORD=nessie
    ports:
      - 19120:19120
    depends_on:
      - postgres_nessie

volumes:
  lakehouse_minio_vol:
  lakehouse_pg_nessie_vol:

networks:
  lakehouse_network:
    name: lakehouse_network
